#!/bin/sh
cd /
set -e +a +m +s +i -f

deletePreviousDuplicatesOfFilesInBackupDir(){
   local backupObj=""
   local -
   set +f
   for backupObj in "$1/"*
   do
      if [ -f "$backupObj" ]
      then
         deletePreviousDuplicateOfBackupFile "$backupObj" "$2"
      elif [ -d "$backupObj" ]
      then
         deletePreviousDuplicatesOfFilesInBackupDir "$backupObj" "$2"
      fi
   done
}

deletePreviousDuplicateOfBackupFile(){
   local backupFile=$1
   local backupIdDir=$2
   local pathOverflow="${backupFile#$backupIdDir/}"
   local backupIdParent="$(/usr/bin/dirname "$backupIdDir")"
   local backupId="$(/usr/bin/basename "$backupIdDir")"
   local previousBackupId="$(( $backupId - 1 ))"
   local previousBackupFile="$backupIdParent/$previousBackupId/$pathOverflow"
   if [ -f "$backupFile" ] && [ -f "$previousBackupFile" ]
   then
      if [ "$(/bin/stat -c %s "$backupFile")" == "$(/bin/stat -c %s "$previousBackupFile")" ]
      then
         /bin/rm "$previousBackupFile"
      fi
   fi
}

IFS_bak=$IFS
[ $(type -t readEnvironmentVars) ] || . /start/functions/readEnvironmentVars
[ $(type -t runBinCmdAsLinuxUser) ] || . /start/functions/runBinCmdAsLinuxUser
[ $(type -t execCmdAsLinuxUser) ] || . /start/functions/execCmdAsLinuxUser
[ $(type -t trim) ] || . /start/functions/trim
backupDir="$1"
readEnvironmentVars
IFS=$(echo -en "\n\b,")
delimiter=""
/bin/mkdir -m 700 -p "$backupDir"
/bin/chown $VAR_LINUX_USER "$backupDir"
if [ "$VAR_DUMP_GLOBALS" == "yes" ]
then
   globalsBackupFileName="postgresql-globals.sql.gz"
   globalsBackupFile="$backupDir/$globalsBackupFileName"
   runBinCmdAsLinuxUser "/usr/local/bin/pg_dumpall --host=$VAR_HOST --port=$VAR_PORT --username=$VAR_LINUX_USER --globals-only | /bin/gzip -c > \"$globalsBackupFile\""
fi
for database in $VAR_DATABASES
do
   database="$(trim $database)"
   dumpCmd="$dumpCmd $delimiter /usr/local/bin/pg_dump --host=$VAR_HOST --port=$VAR_PORT --username=$VAR_LINUX_USER --dbname=$database"
   delimiter='&&'
   eval "format=\$VAR_$database_format"
   if [ -z "$format" ]
   then
      format=$VAR_FORMAT
   fi
   dumpCmd="$dumpCmd --format=$format --file=$backupDir/$database"
   if [ "$format" == "directory" ]
   then
      dumpCmd="$dumpCmd --compress=$VAR_COMPRESS"
      eval "jobs=\$VAR_$database_jobs"
      if [ -z "$jobs" ]
      then
         jobs=$VAR_JOBS
      fi
      dumpCmd="$dumpCmd --jobs=$jobs"
   elif [ "$format" == "plain" ]
   then
      dumpCmd="$dumpCmd.sql --compress=$VAR_COMPRESS"
   fi
   eval "clean=\$VAR_$database_clean"
   if [ "$clean" != "no" ]
   then
      if [ "$clean" == "yes" ] || [ "$VAR_CLEAN" == "yes" ]
      then
         dumpCmd="$dumpCmd --clean"
      fi
   fi
   if [ "$VAR_SCHEMA_ONLY" == "yes" ]
   then
      dumpCmd="$dumpCmd --schema-only"
   fi
   eval "xschemas=\$VAR_$database_excludeschemas"
   for xschema in $xschemas
   do
      xschema="$(trim $xschema)"
      dumpCmd="$dumpCmd --exclude-schema=$xschema"
   done
   eval "schemas=\$VAR_$database_schemas"
   if [ -n "$schemas" ] && [ "$VAR_BLOBS" != "no" ]
   then
      dumpCmd="$dumpCmd --blobs"
   fi
   for schema in $schemas
   do
      schema="$(trim schema)"
      dumpCmd="$dumpCmd --schema=$schema"
      eval "xtables=\$VAR_$database_$schema_excludetables"
      for xtable in $xtables
      do
         xtable="$(trim $xtable)"
         dumpCmd="$dumpCmd --exclude-table=$xtable"
      done
      eval "tables=\$VAR_$database_$schema_tables"
      for table in $tables
      do
         table="$(trim $table)"
         dumpCmd="$dumpCmd --table=$table"
      done
   done
done
IFS=$IFS_bak
if [ -n "$dumpCmd" ]
then
   eval "$dumpCmd"
   if [ "$VAR_LINK_DUPLICATES" == "yes" ]
   then
      deletePreviousDuplicatesOfFilesInBackupDir "$backupDir" "$backupDir"
   fi
   /bin/ln -sf "$backupDir" "$(/usr/bin/dirname "$backupDir")/latest"
fi
